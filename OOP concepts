#CREATING CLASS AND OBJECTS

class Student:
     branch="cse"
     def details(self,regno,name):
           self.rno=regno
           self.n=name
     def printing(self):
           print(self.rno)
           print(self.n)
           print(Student.branch)
s=Student()
s.details(736,"vaish")                    
s.printing()

#CONSTRUCTORS
#DEFAULT CONSTRUCTOR
class Test:
      def __init__(self):
             self.greet="All the best"
      def wish(self):
             print("I wish you",self.greet)
obj=Test()
obj.wish() 

#PARAMETARISED CONSTRUCTOR
class add:
    def __init__(self,f,s):
        self.first=f
        self.second=s
    def display(self):
        print("First Number= ",self.first)
        print("Second Number= ",self.second)
        print("sum = ",self.first+self.second)
obj=add(7,9)
obj.display()
#OUTPUT
First Number=  7
Second Number=  9
sum =  16
#DESTRUCTOR

class cons:
     def __init__(self):
           self.greet="Good mrng"
     def display(self):
           print("A very ",self.greet)
     def __del__(self):
           print("obj destroyed")
obj=cons()
obj.display()
print(obj)
del obj       
#OUTPUT
A very  Good mrng
<__main__.cons object at 0x7f06418df150>
obj destroyed

#SINGLE INHERITANCE

class Parent :
	def Met1(self):
		print("Method in Parent class")
class Child(Parent):
	def Met2(self):
		print("Method in Child Class")
c = Child()
c.Met1()
c.Met2()

#MULTIPLE INHERITANCE

class Parent1:
	def Met1(self):
		print("Method in Parent1 class")
class Parent2:
	def Met2(self):
		print("Method in Parent2 Class")
class Child(Parent1,Parent2):
	def Met3(self):
		print("Method in Child Class")
obj = Child()
obj.Met1()
obj.Met2()	
obj.Met3()
#OUTPUT
Method in Parent1 class
Method in Parent2 Class
Method in Child Class

#MULTI LEVEL INHERITANCE

class Parent :
	def Method1(self):
		print("Method in Parent class")
class Child1(Parent):
	def Method2(self):
		print("Method in Child1 Class")
class Child2(Child1):
	def Method3(self):
		print("Method in Child2 Class")
obj = Child2()
obj.Method1()
obj.Method2()	
obj.Method3()	
#OUTPUT
Method in Parent class
Method in Child1 Class
Method in Child2 Class
#HYBRID INHERITANCE

class Parent:
	def Met1(self):
		print("Method in Main Parent class")
class Child1(Parent):
	def Met2(self):
		print("Method in child_1(Sub) Class")
class Child2(Parent):
	def Met3(self):
		print("Method in Child_2(Sub class) Class")
class Child3(Child1,Child2):
	def Met4(self):
		print("Method in Child_3(Sub_Sub class) Class")
print()
c3 = Child3()
c3.Met1()
c3.Met2()
c3.Met3()
c3.Met4()

#HIERARCHIAL INHERITANCE

class Parent:
	def Met1(self):
		print("Method in Parent class")
class Child1(Parent):
	def Met2(self):
		print("Method in child_1 Class")
class Child2(Parent):
	def Met3(self):
		print("Method in Child_2 Class")
class Child3(Parent):
	def Met4(self):
		print("Method in Child_3 Class")
c1 = Child1()
c1.Met1()
c1.Met2()
print()
c2 = Child2()
c2.Met3()
c2.Met1()
print()
c3 = Child3()
c3.Met4()
c3.Met1()
