#CREATING CLASS AND OBJECTS
class Student:
     branch="cse"
     def details(self,regno,name):
           self.rno=regno
           self.n=name
     def printing(self):
           print(self.rno)
           print(self.n)
           print(Student.branch)
s=Student()
s.details(736,"vaish")                    
s.printing()
#CONSTRUCTORS
class Test:
      def __init__(self):
             self.greet="All the best"
      def wish(self):
             print("I wish you",self.greet)
obj=Test()
obj.wish()            
#DESTRUCTOR
class cons:
     def __init__(self):
           self.greet="Good mrng"
     def display(self):
           print("A very ",self.greet)
     def __del__(self):
           print("obj destroyed")
obj=cons()
obj.display()
print(obj)
del obj           

#SINGLE INHERITANCE
class Parent :
	def Met1(self):
		print("Method in Parent class")
class Child(Parent):
	def Met2(self):
		print("Method in Child Class")
c = Child()
c.Met1()
c.Met2()				
#MULTIPLE INHERITANCE
class Parent1:
	def Met1(self):
		print("Method in Parent_1 class")
class Parent2:
	def Met2(self):
		print("Method in Parent_2 Class")
class Child(Parent1,Parent2):
	def Met3(self):
		print("Method in Child Class")
c = Child()
c.Met1()
c.Met2()	
c.Met3()	
#MULTI LEVEL INHERITANCE
class Parent :
	def Met1(self):
		print("Method in Parent class")
class Child1(Parent):
	def Met2(self):
		print("Method in Child_1 Class")
class Child2(Child1):
	def Met3(self):
		print("Method in Child_2 Class")
c = Child2()
c.Met1()
c.Met2()	
c.Met3()			
#HYBRID INHERITANCE
class Parent:
	def Met1(self):
		print("Method in Main Parent class")
class Child1(Parent):
	def Met2(self):
		print("Method in child_1(Sub) Class")
class Child2(Parent):
	def Met3(self):
		print("Method in Child_2(Sub class) Class")
class Child3(Child1,Child2):
	def Met4(self):
		print("Method in Child_3(Sub_Sub class) Class")
print()
c3 = Child3()
c3.Met1()
c3.Met2()
c3.Met3()
c3.Met4()
#HIERARCHIAL INHERITANCE
class Parent:
	def Met1(self):
		print("Method in Parent class")
class Child1(Parent):
	def Met2(self):
		print("Method in child_1 Class")
class Child2(Parent):
	def Met3(self):
		print("Method in Child_2 Class")
class Child3(Parent):
	def Met4(self):
		print("Method in Child_3 Class")
c1 = Child1()
c1.Met1()
c1.Met2()
print()
c2 = Child2()
c2.Met3()
c2.Met1()
print()
c3 = Child3()
c3.Met4()
c3.Met1()
